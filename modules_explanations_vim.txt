*****************************************************************************
[submodule "vim/bundle/ack.vim"]
    https://github.com/mileszs/ack.vim
    
    ack (ack-grep in debian) should be installed
    let g:ackprg="ack -H -a -i --column" is set.
    * -H ____ with filename
    * -a ____ all types searched, ignoring CVS, .svn etc.
    * -i ____ ignore-case
    * --column ____ show the column number of the first match
    ** -r, -R recursive option comes with default

    Also see the ackrc file for other configurations.
    
    :Ack [options] {pattern} [{directory}] 
    
    AckAdd --> appends to the Ack list
    AckFromSearch --> pattern from previous search

    LAck and LAckAdd exists too, they open a location-list instead of 
a quicklist. Other than this, does the same work with Ack. You can close the 
quicklist window by pressing "q". For more keyboard mappings, write
    :help ack-mappings

    See http://betterthangrep.com/ for more information on Ack.    

*****************************************************************************
[submodule "vim/bundle/ctrlp"]
    https://github.com/kien/ctrlp.vim

    CtrlP to find and open a file.
    Default usage is preferred, mapped to <c-p> (ctrl+p).
    * Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.
    * Run :CtrlPBuffer or :CtrlPMRU to invoke CtrlP in find buffer or find MRU file mode.
    After invoking CtrlP:
        * <c-r> for regex mode, <c-d> filename only search instead of full path
        * <c-b> switch between modes: files, MRU files, buffers
        * Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
        * <c-j> <c-k> for navigation up and down. Or Up-Down keys.
        * <c-n> <c-p> for Ctrlp prompts' history.
        * <c-z> mark files to open
        * <c-y> If search is not found, create a new file and its parent directories.
    * You can close the CtrlP window with Esc or <c-c>
    
    Check  "Ctrlp Plugin" Section of vimrc for details.
    See http://kien.github.io/ctrlp.vim/ for more information on CtrlP plugin
    
*****************************************************************************
[submodule "vim/bundle/gist-vim"]
    https://github.com/mattn/gist-vim

    First you should set you github user in gitconfig:
        git config --global github.user Your_username
    * Post current buffer to Gist, by :Gist command. You can also select some
area and Gist it.
    * :Gist -p --> private gist, Gist -P --> Public gist (default)
    * :Gist -a --> anonymously create gist
    * :Gist -m --> Create a gist with all open buffers
    * :Gist -l --> List your public gists
    * :Gist -l username --> List the user "username"s public gists

    In order to use this plugin, curl and web-api vim module  must be installed
    in your system.

[submodule "vim/bundle/webapi-vim"]
    https://github.com/mattn/webapi-vim

*****************************************************************************
[submodule "vim/bundle/gundo"]
    https://github.com/sjl/gundo.vim
    http://sjl.bitbucket.org/gundo.vim/

    Graphical Vim Undo Tree

    set undofile
    must be set in your vimrc in order to use Gundo.

    The change in vimrc file:
    " Open gundo
    nnoremap <F5> :GundoToggle<CR>

*****************************************************************************
[submodule "vim/bundle/vim-multiple-cursors"]
    https://github.com/terryma/vim-multiple-cursors

    For using multicursors in vim. 
    TODO: study this plugin.
*****************************************************************************

[submodule "vim/bundle/nerdcommenter"]
	https://github.com/scrooloose/nerdcommenter

    For a strong commenting action in many languages. 
    * I frequently use <Leader>c<space> for commenting in/out. 
    * Another option, selecting lines in visual mode, and then <Leader>c<space>

    Current Leader is ,
    So ,c<space> comments in/out.

*****************************************************************************
[submodule "vim/bundle/YouCompleteMe"]
    https://github.com/Valloric/YouCompleteMe

    You must have Vim 7.3.584 with python2 support. Ubuntu 13.04 has 7.3.547 (on
    02.09.2013) so I had to compile Vim due to my needs. 

    Building Vim from source:
    https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source

    I configured with these configurations:

    ./configure --with-features=huge \
        --prefix=/usr
        --enable-cscope
        --enable-pythoninterp
        --with-python-config-dir=/usr/lib/python2.7/python2.7-config
        --enable-gui=gtk2
        --enable-rubyinterp
        --enable-perlinterp
        --enable-luainterp

    And set vim as my default editor due to the building Vim documentation
    above.


*****************************************************************************
[submodule "vim/bundle/tagbar"]
    https://github.com/majutsushi/tagbar

    http://majutsushi.github.io/tagbar/

    TagbarToggle mapped to ,t in vimrc

    It shows the class outline. When Tagbar is opened, press <F1> for details.

    Dependencies: 
    * exuberant-ctags 5.5 or higher
    * vim 7.0 or higher.

*****************************************************************************
[submodule "vim/bundle/vim-autoclose"]
    https://github.com/Townk/vim-autoclose

    echo g:AutoClosePairs 
    shows which elements are included in AutoClose. 
    helps to Automatically close stuff, extremely helpful while coding ;)

*****************************************************************************
[submodule "vim/bundle/vim-colors-solarized"]
    https://github.com/altercation/vim-colors-solarized.git

    TODO: It is problematic right now, checkout later ;)

*****************************************************************************
[submodule "vim/bundle/vim-fugitive"]
    http://github.com/tpope/vim-fugitive

    A powerful git wrapper that I don't use frequently :) 
    TODO: Take a look at it, ASAP.

*****************************************************************************
[submodule "vim/bundle/vim-indent-guides"]
    https://github.com/nathanaelkane/vim-indent-guides.git
    Shows indentation guides when <Leader>ig is pressed.
    In our case, it is ",ig" 
    TODO: It can be configured better ;) No configurations in vimrc yet.

*****************************************************************************
[submodule "vim/bundle/vim-nerdtree"]
    https://github.com/scrooloose/nerdtree.git

    Opened with <leader>n a.k.a. ,n It is used to navigate in the file system.
    * Automatically opened when no files were specified.
    In the NerdTree:
    For the files::
    * o --> for opening on the prev. window
    * go --> for preview
    * t --> open in new tab and focus on the opened file,
    * T --> open in new, do not focus on the newly opened file (open silently)
    * i --> open horizontally split, gi --> preview horizontally split
    * s --> open vertically split, gs --> preview vertically split 

    For the directories::
    * o --> Open/close node
    * O --> recursively open node
    * x --> close parent of node
    * X --> close all child nodes of current node recursively
    * P --> go to root
    * p --> go to parent
    * K --> go to first child
    * J --> go to last child
    * <C-j> --> go to next sibling
    * <C-k> --> go to prev sibling

    Navigation:
    * C --> change tree root to the selected dir
    * u --> move tree root up a dir
    * U --> move tree root up a dir but leave old root open

    When the NerdTree is opened, press ? for details.

*****************************************************************************
[submodule "vim/bundle/vim-powerline"]
    https://github.com/Lokaltog/vim-powerline.git

    These following configurations are set in vimrc.

    set nocompatible   " Disable vi-compatibility
    set laststatus=2   " Always show the statusline
    set encoding=utf-8 " Necessary to show Unicode glyphs

    Powerline_symbols is set too, If you encounter any problems, remove this
    line from your vimrc.
    let g:Powerline_symbols = 'unicode'

*****************************************************************************
[submodule "vim/bundle/vim-python-mode"]
    https://github.com/klen/python-mode.git

    Prominent configurations are:

    * let g:pymode_run_key = '<leader>r'
        " Key for run python code. DEFAULT '<leader>r'
    * let g:pymode_lint_write = 1     
        " Enable pylint checking every save. DEFAULT 1
    * let g:pymode_lint_ignore = "E501"
        " You can add error or warnings to be skipped to here. Currently, None.
    * let g:pymode_lint_select = ""
        " Only show selected error or warnings. Currently, None.

    Check :PyLintAuto vim command for automatically fixing the pep8 errors in
    the bufferzone.
    Check :help PythonModeCommands for details of python-mode commands:
        :Pydoc <args>
        :PyLint
        :PyLintAuto
        :PyRun

    Check :help PythonModeKeys for details of python-mode keys. 


*****************************************************************************
[submodule "vim/bundle/vim-surround"]
    https://github.com/tpope/vim-surround.git

    For doing surrounding stuff.. See :help surround for details.

    ds --> delete surroundings, one argument 
    cs --> change surroundings, two arguments
    ys --> You surround, takes a Vim motion or text object, wraps it with the
    second argument.

    TARGETS:
    See :help surround-targets for further details.

    Eight punctuation marks, (, ), {, }, [, ], <, and >, represent themselves
    and their counterparts.  If the opening mark is used, contained whitespace is
    also trimmed.  The targets b, B, r, and a are aliases for ), }, ], and > 
    (the first two mirror Vim; the second two are completely arbitrary and
    subject to change).

*****************************************************************************
[submodule "vim/bundle/vim-repeat"]
    https://github.com/tpope/vim-repeat.git
    Dependency of vim-surround

    But more than this. TODO: write in details.

*****************************************************************************
[submodule "vim/bundle/xmledit"]
    https://github.com/sukima/xmledit

    Makes it easier to edit xml files. Autoclosing the tags, completion stuff
    etc..

*****************************************************************************
