" vim-plug plugins
" https://github.com/junegunn/vim-plug

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" Add vim-plug as a plugin for Vim help
call plug#begin('~/.vim/plugged')
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'junegunn/vim-plug' 
Plug 'AndrewRadev/splitjoin.vim'
Plug 'SirVer/ultisnips'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Raimondi/delimitMate'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'JamshedVesuna/vim-markdown-preview'
call plug#end()


""""""""""""""""""""""
"      Settings      "
" ------------------ "
set nocompatible                "Turn off compability mode with Vi, we don't need tht anymore
" Enable filetype stuff
filetype on
filetype plugin on
filetype plugin indent on

set showmatch                   " do not show matching brackets by flickering
set mat=3                       " show matching brackets for 0.3 seconds
set incsearch                   " shows the match while typing
set hlsearch                    " highlight found searches
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not it begins with upper case

set wildmenu			" command line tab completion, more superior
set wildmode=list:full		" type :h wildmode for more info about list options
set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size
set history=10000               " Number of lines of command line history. (Upper Bound is 10000 chars)
set noerrorbells                " No beeps
set gdefault                    " Use 'g' flag by default with :s/foo/bar/.
set number                      " Show line numbers

set ttyfast                     " We have a fast terminal connection.
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set ttyscroll=3                 " Speedup scrolling
set laststatus=2                " Show status line always
set showcmd                     " Show me what I'm typing
" TODO: Check airline and/or lightline and set noshowmode
set showmode                    " Show current mode.
set encoding=utf-8              " Set default encoding to UTF-8
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set autoread                    " Automatically read changed files
set autoindent                  " Enable Autoindent
set backspace=indent,eol,start  " Makes backspace key more powerful.
set scrolloff=3			" Start scrolling three lines before the horizontal window border


set splitright                  " Split vertical windows right to the current windows
set splitbelow                  " Split horizontal windows below to the current windows
set noswapfile                  " Don't use swapfile
set clipboard+=unnamed

set lazyredraw                  " the screen will not be redrawn while executing macros, registers
set mat=3                       " show matching brackets for 0.3 seconds

" Prefer unix over windows over os9 formats
set fileformats=unix,dos,mac

" we don't want to edit these kind of files >.<
set wildignore=*.o,*.obj,*.bak,*.exe,*.so,*.la,*.out,*.pyc,*.swp

set nobackup            " Dont create annoying backup files

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  let myUndoDir=expand('~/.config/vim/tmp/undo/')
  " Create dirs
  if !isdirectory(myUndoDir)
    call mkdir(myUndoDir, "p")
  endif

  let &undodir=myUndoDir
  set undofile
endif

" Make vim save and load the folding of the document each time it loads"
" also places the cursor in the last place that it was left."
set viewdir=/tmp

" Per default, netrw leaves unmodified buffers open. This autocommand
" deletes netrw's buffer once it's hidden (using ':q', for example)
" https://vi.stackexchange.com/a/13012
autocmd FileType netrw setl bufhidden=delete

""""""""""""""""""""""
"  -[ FileTypes ]-   "
" ------------------ "
" mail
autocmd FileType mail,human set formatoptions+=t textwidth=80

" markdown
autocmd FileType markdown set textwidth=80
autocmd FileType markdown set nocindent "Wraping fix for braces
autocmd FileType markdown set expandtab "Use spaces for tabs, a requirement by markdown
autocmd FileType markdown set shiftwidth=4

"""""""""""""""""""""""""""""""""""""""""""""
" Mappings, key bindings for plugins, etc.. "
" ----------------------------------------- "
"
" I hate you F1, you are useless
" Act like a ESC
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Better split switching
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" This comes first, because we have mappings that depend on leader
" By default it's the backslash('/').
" With a map leader it's possible to do extra key combinations
" i.e: <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Jump to next error with Ctrl-n and previous error with Ctrl-m. Close the
" quickfix window with <leader>a
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" Shortcut for removing a file in vim
nnoremap <leader>Rm :call delete(expand('%')) \| bdelete!<CR>:q<CR>

" Fast saving
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
nmap <leader>wq :wq!<cr>

" Move up and down on splitted lines (on small width screens)
map <Up> gk
map <Down> gj
map k gk
map j gj

" Act like D and C (yank, delete, copy, same behaviour)
nnoremap Y y$

" Make mouse middle click paste without formatting it
map <MouseMiddle> <Esc>"*p

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Open help window always vertically
nmap zH :vert he

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" Automatically cd into the directory that the file is in
set autochdir

" save it with sudo again
nnoremap <leader>ss :w !sudo tee %<CR>

" This mapping makes Leader-Tab (,Tab) switch between tabs.
" Leader-Shift-Tab(,-Shift-Tab) goes the other way.
noremap <leader><Tab> :tabnext<CR>
noremap <leader><S-Tab> :tabprev<CR>

" Map Leader-mn (,mn) to open a new tab
noremap <leader>mn :tabnew<CR>

" switch between tabs with ,1, ,2,..."
map <leader>1 1gt
map <leader>2 2gt
map <leader>3 3gt
map <leader>4 4gt
map <leader>5 5gt
map <leader>6 6gt
map <leader>7 7gt
map <leader>8 8gt
map <leader>9 9gt
" insert mode
imap <leader>1 <esc>1gt
imap <leader>2 <esc>2gt
imap <leader>3 <esc>3gt
imap <leader>4 <esc>4gt
imap <leader>5 <esc>5gt
imap <leader>6 <esc>6gt
imap <leader>7 <esc>7gt
imap <leader>8 <esc>8gt
imap <leader>9 <esc>9gt


"""""""""""""""""""""
"      Plugins      "
"""""""""""""""""""""

" ack spesific fixes
"""""""""""""""""""""
let g:ackprg="ack -H -a -i --column"
noremap <Leader>a :LAck! <cword><cr>

" Nerdtree plugin
"""""""""""""""""""""
nmap <leader>n :NERDTreeToggle <CR>
let NERDTreeChDirMode=1

"if g:os == 'Darwin' || g:os == 'Mac'
if has('osx')
    let g:NERDTreeDirArrows=0 " Fix a bug on mac
endif

let NERDTreeIgnore=['\~$', '\.pyc$', '\.pyo$', '\.class$', 'pip-log\.txt$', '\.o$']

" ultisnips
"""""""""""""""""""""
" Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" vim-go
"""""""""""""""""""""
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"

let g:go_auto_type_info = 1
" It can easily get annoying
" let g:sameids = 1

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1

" Open :GoDeclsDir with ctrl-g
nmap <C-g> :GoDeclsDir<cr>
imap <C-g> <esc>:<C-u>GoDeclsDir<cr>


augroup go
  autocmd!

  " Show by default 4 spaces for a tab
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4

  " :GoBuild and :GoTestCompile
  autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

  " :GoTest
  autocmd FileType go nmap <leader>t  <Plug>(go-test)

  " :GoTestFunc
  autocmd FileType go nmap <leader>tf  <Plug>(go-test-func)

  " :GoRun
  autocmd FileType go nmap <leader>r  <Plug>(go-run)

  " :GoDoc
  autocmd FileType go nmap <Leader>d <Plug>(go-doc)

  " :GoCoverageToggle
  autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

  " :GoInfo
  autocmd FileType go nmap <Leader>i <Plug>(go-info)

  " :GoMetaLinter
  autocmd FileType go nmap <Leader>l <Plug>(go-metalinter)

  " :GoDef but opens in a vertical split
  autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
  " :GoDef but opens in a horizontal split
  autocmd FileType go nmap <Leader>s <Plug>(go-def-split)
  " :GoRename
  autocmd FileType go nmap <Leader>ren <Plug>(go-rename)


  " :GoAlternate  commands :A, :AV, :AS and :AT
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
augroup END

" build_go_files is a custom function that builds or compiles the test file.
" It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

" vim markdown plugin
"""""""""""""""""""""
let vim_markdown_preview_github=1
