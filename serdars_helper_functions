#################################
#	GIT RELATED HELPERS	#
#################################

update_git_repo() {
    local repo=$1
    echo
    echo "UPDATING $repo"
    echo
    pushd $repo > /dev/null
    git fetch --prune
    local stash_output=`git stash`
    git co main
    git pull origin main
    if [[ `git branch --list develop ` ]]; then
        git co develop
        git pull origin develop
        git co @{-2}
    else
        git co @{-1}
    fi
    if [ "${stash_output}" != "No local changes to save" ]; then
	git stash pop
    fi
    popd > /dev/null
}

update_all_git_repos() {
    # If no args are given, take the current dir as a first argument
    local dir=${1:-.}
    cd ${dir}
    if [[ -a ".update" ]]; then
        for repo in `cat .update`; do
            update_git_repo $repo
        done
    else
	echo "No .update file is found, creating one..."
	for dir in `find . -maxdepth 2 -name .git`;
	do
	    echo `dirname $dir` >> .update;
        done
	echo "Please check the autocreated .update file and run $funcstack[1] command again."
    fi
}


#########################################
#	SSH CONFIG/KEY HELPERS		#
#########################################

add_ssh_keys_in_the_folder() {
    DIR=$1
    if [ "$(ls -A $DIR)" ]; then
	# Do not add public keys, ending with .pub
	for privat_key in `find $DIR -type f ! -name "*.*"`; do
            ssh-add $privat_key
        done
	# Add *.pem files too. TODO: Check if there are any *.pem files
	# for pem_file in ${DIR}/*.pem; do
	#     ssh-add $pem_file
        # done
    fi
}

add_serdars_ssh_keys() {
    add_ssh_keys_in_the_folder ~/.ssh/privat
}

# I'm only using the default ssh key at this moment, so let's disable this call for now.
# add_serdars_ssh_keys

# Used for creating an ~/.ssh/config file.
#
# Either you call it without any arguments and it adds all the .sshconfig files
# under ~/.ssh/sshconfigd/{public/private} directories
# or
# You would specify which configurations you want to add to your ~/.ssh/config
# file
create_ssh_config() {
	(
	        # Install flock on MacOS
		# https://github.com/discoteq/flock
		flock -n 8 || return 1
		# commands
		mv ~/.ssh/config ~/.ssh/old_config
		if (( $# > 0 )); then
			for arg;
			do cat $arg >> ~/.ssh/config; echo >> ~/.ssh/config
			done;
		else
			# (n) is a zsh function for numerical sort
			echo "################################################################" >> ~/.ssh/config
			echo "# Private ssh configs from ~/.ssh/sshconfigd/private directory #" >> ~/.ssh/config
			echo "################################################################" >> ~/.ssh/config
			setopt +o nomatch
			for priv in ~/.ssh/sshconfigd/private/*.sshconfig(n);
			do
				cat $priv >> ~/.ssh/config
				echo >> ~/.ssh/config
			done
			echo "##############################################################" >> ~/.ssh/config
			echo "# Public ssh configs from ~/.ssh/sshconfigd/public directory #" >> ~/.ssh/config
			echo "##############################################################" >> ~/.ssh/config
			for pub in ~/.ssh/sshconfigd/public/*.sshconfig(n);
			do
				cat $pub >> ~/.ssh/config
				echo >> ~/.ssh/config
			done
			setopt -o nomatch
		fi
		echo "~/.ssh/config is regenerated."
	) 8> ~/.ssh/config.lock
}

#create_ssh_config public/01-bitbucket.sshconfig public/99-default.sshconfig
# The following is the same with running create_ssh_config without any arguments
# create_ssh_config ~/.ssh/sshconfigd/private/*(n) ~/.ssh/sshconfigd/public/*(n)
create_ssh_config

#################################
#	MISC HELPERS		#
#################################

nsalistens() {
    # shows which ports are being listened on local machine
    sudo lsof -nP +c 15 |grep LISTEN
}

no_newline_at_the_end() {
    printf %s "$(cat $1)" > $1
}

extract_all_gz() {
    if (($# == 0 ))
    then searchdir="."
    else searchdir=$1; fi
    # Extract comes from zsh extract plugin
    find $searchdir -name "*.gz" | while read filename; do extract $filename; done
}

compress_all_to_gz() {
    if (($# == 0 ))
    then searchdir="."
    else searchdir=$1; fi
    find $searchdir -type file -name "*" | while read filename; do gzip $filename; done
}

# Taken from this gist https://gist.github.com/evansd/1639992
substitute() {
    if [ -z "$1" -o -z "$2" ]; then
        echo "Usage: substitue FROM_STRING TO_STRING [OPTION]..."
        echo
        echo "Replace all occurances of FROM_STRING (a sed-compatible regular"
        echo "expression) with TO_STRING in all files for which ack-grep matches"
        echo "FROM_STRING."
        echo
        echo "Any additional options are passed directly to ack-grep (e.g.,"
        echo " --type=html would only run the substitution on html files)."
        return 1
    fi
    # Escape forward slashes for sed
    FROM_STRING=${1/\//\\/}
    TO_STRING=${2/\//\\/}
    shift 2
    ack -l --print0 "$@" "$FROM_STRING" | xargs -0 -n 1 sed -i -e "s/$FROM_STRING/$TO_STRING/g"
}

timemark() {
  date +'%Y-%m-%d--%H-%M-%S'
}

#################################################
#	LAZY LOADING OF VARIOUS PROGRAMS	#
#	TODO: Cleanup 				#
#################################################

export PATH=$PATH:${HOME}/.pyenv/bin
# Lazy load pyenv
if command -v pyenv 1> /dev/null 2>&1; then
  echo "lazy loading pyenv"
  local PYENV_SHIMS="${PYENV_ROOT:-${HOME}/.pyenv}/shims"
  export PATH="${PYENV_SHIMS}:${PATH}"
  function pyenv() {
    unset pyenv
    eval "$(command pyenv init -)"
    eval "$(command pyenv virtualenv-init -)"
    # oh-my-zsh aws plugin doesn't work well with pyenv, that's why I source it in that way
    if pyenv which aws_zsh_completer.sh 1>/dev/null 2>&1; then
      # aws zsh completion is enabled the first time you run pyenv on your current shell
      # TODO: Is there a better way to manage this within pyenv? Investigate.
      echo "lazy loading aws_zsh_completer over pyenv"
      source "$(pyenv which aws_zsh_completer.sh)"
    fi
    pyenv $@
  }
fi

# Lazy load Kompose
if command -v kompose 1>/dev/null 2>&1; then
  function kompose() {
    unset kompose
    eval "$(command kompose completion zsh)"
    kompose $@
  }
fi

# flux completion zsh
# See https://fluxcd.io/docs/cmd/flux_completion_zsh/
command -v flux >/dev/null && . <(flux completion zsh)

#################################
#	PATH MANIPULATION 	#
#################################

# Needed for kubectl krew
# Documentation: https://krew.sigs.k8s.io/
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

#################################
#	VARIOUS ALIASES		#
#################################

# ack aliases
alias terrack="ack --ignore-dir=.terraform --terraform --json"
alias show_terra_resources="ack '^resource '"

#AWSume alias to source the AWSume script.
alias awsume='. \$(pyenv which awsume)'

# jumps to the root path of a git repository. Thanks to Fatih for that https://twitter.com/fatih/status/1381555413083168769
alias cdr='cd "$(git rev-parse --show-toplevel || echo .)"'

# TODO: I'm not using helmfile anymore
#       Let's keep this hack here for some time, and then if it's not needed anymore,
#       we can remove it.
# Hack for being able to pass version var to helmfile
# If the helmfile executable is parsed via shims, the `version` env var
# will be the helmfile version that's set via asdf
# export PATH=/Users/serdar/.asdf/installs/helmfile/0.130.1/bin:${PATH}

##############################
# Console Do Not Track (DNT) #
##############################
# https://consoledonottrack.com/
export HOMEBREW_NO_ANALYTICS=1
export DO_NOT_TRACK=1
export SAM_CLI_TELEMETRY=0
export AZURE_CORE_COLLECT_TELEMETRY=0
# Run the gcloud command once
# gcloud config set disable_usage_reporting true

# Source specialized helper functions for EDB Development
[ -f ~/.edb_functions ] && source ~/.edb_functions
